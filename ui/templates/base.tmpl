{{ define "base" }}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Home IoT, a Home Automation solution to secure your home and save money on energy consumption.">
    <meta name="keywords" content="Home, IoT, Automation, Security, Energy, Consumption, Waste, Save, Light, Intrusion, Garden, Water, Plant, Door, Presence, Monitor">
    <meta name="author" content="Antoine de Barbarin">
    <meta name="author" content="Nicolas Moyon">

    <title> {{ .Title }} </title>

    <link rel="icon" type="image/png" href="/static/img/logo/logo.png">
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>

    <div class="page-ctn">

{{/* #######################################################################################*/}}
{{/*                                        HEADER                                          */}}
{{/* #######################################################################################*/}}

            <header class="header-ctn">
            <div class="header">

{{/*            Name left           */}}
                <div class="name relative">
                    <a href="/" class="abs full on-top"></a>
                    Home IoT
                </div>

{{/*            Nav Home Articles           */}}
{{/*                <nav class="header-nav">*/}}
{{/*                    <a href="/home" class="header-link">Home</a>*/}}
{{/*                    <a href="/home" class="header-link">Latest</a>*/}}
{{/*                </nav>*/}}

{{/*            Search bar          */}}
{{/*                <form action="/search" method="get" class="search-bar">*/}}

{{/*                    */}}{{/*CSRF Token*/}}
{{/*                    <input type="hidden" name="csrf_token" value="{{ .CSRFToken }}">*/}}

{{/*                    */}}{{/*Shortcut Message*/}}
{{/*                    <span class="search-label">Ctrl+K</span>*/}}

{{/*                    */}}{{/*Search input*/}}
{{/*                    <label class="abs display-none" for="search-input"></label>*/}}
{{/*                    <input type="text" name="q" id="search-input" class="search-input" required />*/}}

{{/*                    */}}{{/*Submit button*/}}
{{/*                    <button type="submit" class="search-btn">*/}}
{{/*                        <i data-lucide="search" class="search-icon"></i>*/}}
{{/*                    </button>*/}}
{{/*                </form>*/}}

{{/*            Social links           */}}
{{/*                 <div class="header-social"> */}}

{{/*                      */}}{{/*LinkedIn*/}}
{{/*                     <div class="social-elem relative"> */}}
{{/*                         <a href="https://linkedin.com/in/adebarbarin" target="_blank" class="abs full on-top"></a> */}}
{{/*                         <img src="/static/img/icons/linkedin-icon.svg" alt="linkedin icon" class="social-icon" /> */}}
{{/*                         <span class="social-name">LinkedIn</span> */}}
{{/*                     </div> */}}

{{/*                      */}}{{/*Github*/}}
{{/*                     <div class="social-elem relative"> */}}
{{/*                         <a href="https://github.com/deBarbarinAntoine" target="_blank" class="abs full on-top"></a> */}}
{{/*                         <img src="/static/img/icons/github-icon.svg" alt="github icon" class="social-icon" /> */}}
{{/*                         <span class="social-name">Github</span> */}}
{{/*                     </div> */}}

{{/*                      */}}{{/*Contact Me*/}}
{{/*                     <div class="social-elem relative"> */}}
{{/*                         <a href="/home#contact-me" class="abs full on-top"></a> */}}
{{/*                         <img src="/static/img/icons/mail-icon.svg" alt="mail icon" class="social-icon" /> */}}
{{/*                         <span class="social-name">Contact me</span> */}}
{{/*                     </div> */}}
{{/*                 </div> */}}

            </div>
        </header>


{{/* #######################################################################################*/}}
{{/*                                 MAIN - TEMPLATE                                        */}}
{{/* #######################################################################################*/}}

        <main class="template-ctn">

{{/*        FLASH       */}}
{{/* Test flash messages with position fixed and a translateY transition to make it appear from the top of the screen */}}
            {{ with .Flash }}
                <div class="flash">
                    <span class="flash-message"> {{ . }} </span>
                </div>
            {{ end }}

{{/*        TEMPLATE PAGE          */}}
            {{ template "page" . }}

        </main>


{{/* #######################################################################################*/}}
{{/*                                        FOOTER                                          */}}
{{/* #######################################################################################*/}}

        <footer class="footer-ctn">

            {{/*Copyrights*/}}
            <div class="copyrights">
                &copy; {{ .CurrentYear }} Nicolas Moyon - Antoine de Barbarin. All rights reserved.
            </div>

            {{/*Nav links*/}}
{{/*            <nav class="footer-links">*/}}
{{/*                <a href="/policies#privacy" class="footer-link">Privacy Policy</a>*/}}
{{/*                <a href="/policies#terms" class="footer-link">Terms &amp; Conditions</a>*/}}
{{/*            </nav>*/}}

{{/*            */}}{{/*Social links*/}}
{{/*            <div class="footer-social">*/}}

{{/*                */}}{{/*LinkedIn*/}}
{{/*                <div class="social-elem relative">*/}}
{{/*                        <a href="https://linkedin.com/in/adebarbarin" target="_blank" class="abs full on-top"></a>*/}}
{{/*                    <img src="/static/img/icons/linkedin-icon.svg" alt="linkedin icon" class="social-icon" />*/}}
{{/*                    <span class="social-name">LinkedIn</span>*/}}
{{/*                </div>*/}}

{{/*                */}}{{/*Github*/}}
{{/*                <div class="social-elem relative">*/}}
{{/*                        <a href="https://github.com/deBarbarinAntoine" target="_blank" class="abs full on-top"></a>*/}}
{{/*                    <img src="/static/img/icons/github-icon.svg" alt="github icon" class="social-icon" />*/}}
{{/*                    <span class="social-name">Github</span>*/}}
{{/*                </div>*/}}

{{/*                */}}{{/*Contact Me*/}}
{{/*                <div class="social-elem relative">*/}}
{{/*                        <a href="/home#contact-me" class="abs full on-top"></a>*/}}
{{/*                    <img src="/static/img/icons/mail-icon.svg" alt="mail icon" class="social-icon" />*/}}
{{/*                    <span class="social-name">Contact me</span>*/}}
{{/*                </div>*/}}

{{/*            </div>*/}}
        </footer>

    </div>

{{/* #######################################################################################*/}}
{{/*                                      JS SCRIPTS                                        */}}
{{/* #######################################################################################*/}}

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script nonce="{{ .Nonce }}">

        {{/*generating lucide icons*/}}
        lucide.createIcons();

        {{/*including the CSRF token in the axios requests*/}}
        axios.defaults.headers.common['X-CSRF-TOKEN'] = {{ .CSRFToken }};
        axios.defaults.withCredentials = true;


        {{/*####################################*/}}
        {{/*      Flash Message Animation       */}}
        {{/*####################################*/}}

        {{/*getting the flash message element*/}}
        const flash = document.querySelector('.flash');

        {{/*checking if there is a flash message*/}}
        if (!!flash) {

            {{/*making the flash message appear*/}}
            flash.style.transform = 'translate(0,-4px)';
            setTimeout(() => {

                {{/*pushing the flash message up (with timeout)*/}}
                flash.style.transform = 'translate(0,-101%)';

                {{/*removing the flash message (with another timeout)*/}}
                setTimeout(() => flash.style.display = 'none', 2000);
            }, 5000);
        }


        {{/*####################################*/}}
        {{/*   Search field Actions & Shorcuts  */}}
        {{/*####################################*/}}

        {{/*Prevent predefined messages when search is invalid*/}}
        // const searchInput = document.querySelector('input#search-input.search-input');
        // searchInput.addEventListener('invalid', (function () {
        //     return function (e) {
        //         e.preventDefault();
        //         searchInput.focus();
        //     };
        // })(), true);

        {{/*Access search input when typing Ctrl+K*/}}
        // document.addEventListener("keydown", (e) => {
        //     e = e || window.event;
        //     if (e.ctrlKey && e.key === "k") {
        //         searchInput.focus();
        //         e.preventDefault();
        //     }
        // });

        {{/*Access search input when clicking on tag Ctrl+K*/}}
        // const searchTag = document.querySelector('.search-label');
        // searchTag.addEventListener('click', () => searchInput.focus());


        {{/*####################################*/}}
        {{/*    Remove CSRF token from URL      */}}
        {{/*####################################*/}}

        if (window.location.href.includes('csrf_token')) {
            window.history.pushState({}, "{{ .Title }}", window.location.href.replace(/csrf_token[^&]+&?/, ''));
        }


        {{/*####################################*/}}
        {{/*    Location name update form       */}}
        {{/*####################################*/}}

        {{/*<form data-id="{{ .Location.ID }}" class="location-form">*/}}
        {{/*    <input type="hidden" name="csrf_token" value="{{ $csrf_token }}">*/}}
        {{/*        <label for="location-name-input"></label>*/}}
        {{/*        <input id="location-name-input" type="text" class="location-name-input" value="{{ .Location.Name }}" />*/}}
        {{/*        <button class="button location-form-button">Update</button>*/}}
        {{/*</form>*/}}

        const locationForms = document.querySelectorAll('.location-form');
        if (!!locationForms && locationForms.length > 0) {
            locationForms.forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();

                    const locationName = form.querySelector('.location-name-input').value;
                    const locationID = form.dataset.id;

                    axios.post(`/locations/${locationID}`, {
                        locationName: locationName
                    })
                        .then(response => {
                            console.log("Success:", response.data);
                        })
                        .catch(error => {
                            console.error("Error:", error.response?.data || error);
                        });
                });
            });
        }


        {{/*####################################*/}}
        {{/*              Websockets            */}}
        {{/*####################################*/}}

        const ws = new WebSocket("{{ .WebsocketURL }}");
        ws.onmessage = (event) => {
            console.log("Received:", event.data);
            // Parse the received JSON data
            const devices = JSON.parse(event.data);

            // Loop through the devices
            devices.forEach(device => {
                // Find the device element by its ID (from the received data)
                const deviceElement = document.getElementById(device.ID);

                if (deviceElement) {
                    // Update the device name and type
                    const deviceName = deviceElement.querySelector('.name');
                    const deviceType = deviceElement.querySelector('.type');

                    if (deviceName) {
                        deviceName.textContent = device.Name;
                    }
                    if (deviceType) {
                        deviceType.textContent = device.Type;
                    }

                    // Loop through the modules and update the module data
                    device.Modules.forEach(module => {
                        const validModuleId = `id-${module.ID}`;
                        const moduleElement = deviceElement.querySelector(`#${validModuleId}`);
                        if (moduleElement) {
                            const moduleName = moduleElement.querySelector('.module-name');
                            const moduleValue = moduleElement.querySelector('.module-value');

                            if (moduleName) {
                                moduleName.textContent = module.Name;
                            }
                            if (moduleValue) {
                                const numericValue = Number(module.Value);
                                if (module.Value !== '' && !isNaN(numericValue)) {
                                    moduleValue.textContent = numericValue.toFixed(1).toString();
                                } else {
                                    moduleValue.textContent = module.Value;
                                }
                            }
                        }
                    });
                }
            });
        };

    </script>

</body>
</html>
{{ end }}